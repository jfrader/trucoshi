import { ECommand, EHandState, ICard, IHandPoints, IPlayer } from "../../types";
import { IEnvido } from "./Envido";
import { IMatch } from "./Match";
import { IPlayInstance } from "./Play";
import { IRound } from "./Round";
import { ITruco } from "./Truco";
export interface IHand {
    idx: number;
    state: EHandState;
    turn: number;
    started: boolean;
    points: IHandPoints;
    truco: ITruco;
    envido: IEnvido;
    rounds: Array<IRound>;
    _currentPlayer: IPlayer | null;
    get currentPlayer(): IPlayer | null;
    set currentPlayer(player: IPlayer | null);
    currentRound: IRound | null;
    say(command: ECommand, player: IPlayer): ECommand | null;
    finished: () => boolean;
    setTurnCommands(): void;
    play(prevHand: IHand | null): IPlayInstance | null;
    nextTurn(): void;
    endEnvido(): void;
    sayEnvidoPoints(player: IPlayer, points: number): number;
    use(idx: number, card: ICard, burn?: boolean): ICard | null;
    pushRound(round: IRound): IRound;
    setTurn(turn: number): IPlayer;
    addPoints(team: 0 | 1, points: number): void;
    disablePlayer(player: IPlayer): void;
    setCurrentRound(round: IRound | null): IRound | null;
    setCurrentPlayer(player: IPlayer | null): IPlayer | null;
    setState(state: EHandState): EHandState;
    getNextTurn(): IteratorResult<IHand, IHand | void>;
}
export declare function Hand(match: IMatch, idx: number): IHand;
