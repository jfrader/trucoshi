// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserStats {
  id        Int  @id @default(autoincrement())
  accountId Int? @unique
  win       Int  @default(0)
  loss      Int  @default(0)
  satsBet   Int  @default(0)
  satsWon   Int  @default(0)
  satsLost  Int  @default(0)
}

model Match {
  id             Int           @id @default(autoincrement())
  sessionId      String
  state          EMatchState   @default(UNREADY)
  ownerAccountId Int?
  options        Json          @default("{}")
  results        Json          @default("[{\"buenas\": 0,\"malas\": 0 },{ \"buenas\": 0,\"malas\": 0 }]")
  players        MatchPlayer[]
  hands          MatchHand[]
  bet            MatchBet?
}

model MatchBet {
  id             Int     @id @default(autoincrement())
  match          Match   @relation(fields: [matchId], references: [id])
  matchId        Int     @unique
  satsPerPlayer  Int
  allPlayersPaid Boolean
  winnerAwarded  Boolean
}

model MatchHand {
  id              Int   @id @default(autoincrement())
  idx             Int
  rounds          Json  @default("[[]]")
  results         Json  @default("[0, 0]")
  matchId         Int
  match           Match @relation(fields: [matchId], references: [id])
  trucoWinnerIdx  Int?
  envidoWinnerIdx Int?
  florWinnerIdx   Int?
}

model MatchPlayer {
  id           Int    @id @default(autoincrement())
  idx          Int
  name         String @default("Satoshi")
  accountId    Int?
  teamIdx      Int
  satsPaid     Int    @default(0)
  satsReceived Int    @default(0)
  payRequestId Int?
  matchId      Int
  match        Match  @relation(fields: [matchId], references: [id])
}

enum EMatchState {
  UNREADY
  READY
  STARTED
  FINISHED
}
